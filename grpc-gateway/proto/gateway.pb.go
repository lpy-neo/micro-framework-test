// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc-gateway/proto/gateway.proto

package grpc_gateway // import "github.com/lpy-neo/micro-framework-test/grpc-gateway/grpc_gateway"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import comm_proto "github.com/lpy-neo/micro-framework-test/comm_proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GrpcServiceClient is the client API for GrpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GrpcServiceClient interface {
	GrpcReq(ctx context.Context, in *comm_proto.GrpcRequest, opts ...grpc.CallOption) (*comm_proto.GrpcReply, error)
}

type grpcServiceClient struct {
	cc *grpc.ClientConn
}

func NewGrpcServiceClient(cc *grpc.ClientConn) GrpcServiceClient {
	return &grpcServiceClient{cc}
}

func (c *grpcServiceClient) GrpcReq(ctx context.Context, in *comm_proto.GrpcRequest, opts ...grpc.CallOption) (*comm_proto.GrpcReply, error) {
	out := new(comm_proto.GrpcReply)
	err := c.cc.Invoke(ctx, "/grpc_gateway.GrpcService/GrpcReq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrpcServiceServer is the server API for GrpcService service.
type GrpcServiceServer interface {
	GrpcReq(context.Context, *comm_proto.GrpcRequest) (*comm_proto.GrpcReply, error)
}

func RegisterGrpcServiceServer(s *grpc.Server, srv GrpcServiceServer) {
	s.RegisterService(&_GrpcService_serviceDesc, srv)
}

func _GrpcService_GrpcReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(comm_proto.GrpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServiceServer).GrpcReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_gateway.GrpcService/GrpcReq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServiceServer).GrpcReq(ctx, req.(*comm_proto.GrpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GrpcService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_gateway.GrpcService",
	HandlerType: (*GrpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GrpcReq",
			Handler:    _GrpcService_GrpcReq_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc-gateway/proto/gateway.proto",
}

func init() {
	proto.RegisterFile("grpc-gateway/proto/gateway.proto", fileDescriptor_gateway_015b929b4e9aab9f)
}

var fileDescriptor_gateway_015b929b4e9aab9f = []byte{
	// 167 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x48, 0x2f, 0x2a, 0x48,
	0xd6, 0x4d, 0x4f, 0x2c, 0x49, 0x2d, 0x4f, 0xac, 0xd4, 0x2f, 0x28, 0xca, 0x2f, 0xc9, 0xd7, 0x87,
	0xf2, 0xf4, 0xc0, 0x3c, 0x21, 0x1e, 0x90, 0x8a, 0x78, 0xa8, 0x98, 0x94, 0x68, 0x72, 0x7e, 0x6e,
	0x6e, 0x3c, 0x54, 0x5d, 0x51, 0x41, 0x32, 0x44, 0x91, 0x91, 0x17, 0x17, 0xb7, 0x7b, 0x51, 0x41,
	0x72, 0x70, 0x6a, 0x51, 0x59, 0x66, 0x72, 0xaa, 0x90, 0x35, 0x17, 0x3b, 0x88, 0x1b, 0x94, 0x5a,
	0x28, 0x24, 0xae, 0x87, 0xd0, 0xa1, 0x07, 0x15, 0x2c, 0x4d, 0x2d, 0x2e, 0x91, 0x12, 0xc5, 0x94,
	0x28, 0xc8, 0xa9, 0x54, 0x62, 0x70, 0x72, 0x8e, 0x72, 0x4c, 0xcf, 0x2c, 0xc9, 0x28, 0x4d, 0x02,
	0x29, 0xd0, 0xcf, 0x29, 0xa8, 0xd4, 0xcd, 0x4b, 0xcd, 0xd7, 0xcf, 0xcd, 0x4c, 0x2e, 0xca, 0xd7,
	0x4d, 0x2b, 0x4a, 0xcc, 0x4d, 0x2d, 0xcf, 0x2f, 0xca, 0xd6, 0x2d, 0x49, 0x2d, 0x2e, 0xd1, 0x47,
	0x71, 0x3c, 0xb2, 0x3b, 0x93, 0xd8, 0xc0, 0xe6, 0x1a, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xe3,
	0xe0, 0xdf, 0xc0, 0xe0, 0x00, 0x00, 0x00,
}
